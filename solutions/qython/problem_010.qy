def is_palindrome(text):
    """Test if given string is a palindrome"""
    return text is reverse(text)

def make_palindrome(text):
    """Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    """
    # Empty string is already a palindrome
    if len(text) == 0:
        return text

    # Find the longest palindromic suffix
    # Start from the full string and work backwards
    i = 0
    while i < len(text):
        # Check if substring from position i to end is a palindrome
        suffix = text[i:]
        if is_palindrome(suffix):
            # Found the longest palindromic suffix
            # The prefix is everything before position i
            prefix = text[:i]
            # Return original string + reverse of prefix
            return np.concatenate([text, reverse(prefix)])
        i += 1

    # Should never reach here, but if we do, return the string as is
    return text
