def cycpattern_check(a, b):
    """Check if any rotation of b is a substring in a"""
    # Convert to strings for manipulation
    str_a = a if isinstance(a, str) else String(a)
    str_b = b if isinstance(b, str) else String(b)

    # Generate all rotations of b and check if any is in a
    b_len = len(str_b)

    # Check each rotation
    i = 0
    while i < b_len:
        # Create rotation: b[i:] + b[:i]
        rotation = np.concatenate([str_b[i:], str_b[:i]])

        # Check if rotation is substring of a
        # We'll check all possible positions in a
        a_len = len(str_a)
        rotation_len = len(rotation)

        if rotation_len <= a_len:
            j = 0
            while j <= a_len - rotation_len:
                # Check if substring matches
                substring = str_a[j:j + rotation_len]
                if rotation is substring:
                    return True
                j += 1

        i += 1

    return False
